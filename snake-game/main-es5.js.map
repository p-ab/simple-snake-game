{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/grid-layout/grid-layout.component.ts","webpack:///src/app/grid-layout/grid-layout.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","KeyCodeEnum","GridLayoutComponent","grid","rows","columns","getTotal","defaultSpeed","feed","points","position","gameStates","isOver","isPaused","isStarted","pauseSubject","intervalSubject","iterations","keyboardLocked","event","keyCode","right","changeDirection","up","left","down","space","togglePause","enter","initGame","preventDefault","snake","positions","speed","direction","orientation","initPos","randomPos","indent","startPos","push","gameObserver","getTimer","next","pause","pausable$","pipe","value","v","paused","gameAction","time","list","Array","index","Math","trunc","random","indexOf","vector","horCondition","vertCondition","moveSnake","tailPos","slice","headPos","makeStep","coords","y","x","collisionTriggers","collision","setError","rewardEl","rewardForFeed","undefined","length","msg","console","error","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'snake-game';\n}\n","<p>Snake game</p>\n\n<app-grid-layout></app-grid-layout>\n<hr>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { GridLayoutComponent } from './grid-layout/grid-layout.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GridLayoutComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, HostListener, OnDestroy } from '@angular/core';\nimport { Observable, interval, defer, BehaviorSubject } from 'rxjs';\nimport { filter, map, switchMap, withLatestFrom, repeat } from 'rxjs/operators';\n\nenum KeyCodeEnum {\n  right = 39, left = 37, up = 38, down = 40,\n  space = 32, enter = 13\n}\ninterface SnakeInterface {\n  positions: number[];\n  points: number;\n  speed: number;\n  direction: 'right'|'left'|'up'|'down';\n  orientation: 'horizontal'|'vertical';\n}\n@Component({\n  selector: 'app-grid-layout',\n  templateUrl: './grid-layout.component.html',\n  styleUrls: ['./grid-layout.component.scss']\n})\nexport class GridLayoutComponent implements OnInit {\n\n  grid = {\n    rows: 10, columns: 10,\n    getTotal() { return this.rows * this.columns; }\n  };\n  defaultSpeed = 700;\n  snake: SnakeInterface;\n\n  feed = { points: 10, position: null };\n\n  gameStates = { isOver: false, isPaused: false, isStarted: false };\n  gameObserver: { time: Observable<any> };\n  pauseSubject = new BehaviorSubject(true);\n  intervalSubject = new BehaviorSubject(this.defaultSpeed);\n\n  iterations = 0;\n  keyboardLocked = false;\n\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    switch (event.keyCode) {\n      case KeyCodeEnum.right: this.changeDirection('right'); break;\n      case KeyCodeEnum.up: this.changeDirection('up'); break;\n      case KeyCodeEnum.left: this.changeDirection('left'); break;\n      case KeyCodeEnum.down: this.changeDirection('down'); break;\n      case KeyCodeEnum.space:\n        this.togglePause();\n        break;\n      case KeyCodeEnum.enter:\n        this.initGame();\n        break;\n      default:\n        this.changeDirection('right');\n    }\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  preventScroll(event) {\n    switch (event.keyCode) {\n      case 37: case 39: case 38:  case 40:\n      case 32: event.preventDefault(); break;\n      default: break;\n    }\n  }\n  constructor() {}\n\n  ngOnInit() {\n    this.initGame();\n  }\n\n  initGame() {\n    this.gameStates.isOver = false;\n    this.snake = {\n      positions: [], points: 0, speed: this.defaultSpeed,\n      direction: 'right', orientation: 'horizontal'\n    };\n    this.feed = { points: 10, position: null };\n\n    const initPos = this.randomPos();\n    const indent = initPos % this.grid.columns;\n    const startPos = this.grid.columns - indent < 3 ? initPos - 3 : initPos;\n\n    this.snake.positions.push(startPos);\n    this.feed.position = this.randomPos();\n\n    this.gameStates.isStarted = true;\n    this.gameStates.isPaused = true;\n\n    this.gameObserver = this.getTimer(this.pauseSubject);\n  }\n\n  // to-do: rewrite.\n  togglePause() {\n    if (this.gameStates.isPaused) {\n      this.gameStates.isPaused = false;\n      this.pauseSubject.next(false);\n    } else {\n      this.gameStates.isPaused = true;\n      this.pauseSubject.next(true);\n    }\n  }\n\n  getTimer(pause: BehaviorSubject<boolean>) {\n    const pausable$ = defer(() => {\n      return this.intervalSubject.pipe(\n        switchMap(value => interval(value)),\n        withLatestFrom(pause),\n        filter(([v, paused]) => !paused),\n        repeat(),\n        map(() => {\n          this.intervalSubject.next(this.snake.speed);\n          this.gameAction();\n        })\n      );\n    });\n\n    return { time: pausable$ };\n  }\n\n  generateGridList() {\n    const list = [... Array(this.grid.getTotal()).keys()];\n    return list;\n  }\n\n  randomPos() {\n    // value from 0 (inclusive) to total grid cells count (exclusive):\n    const index = Math.trunc(Math.random() * this.grid.getTotal());\n    return this.snake.positions.indexOf(index) === -1 ? index : this.randomPos();\n  }\n\n  changeDirection(vector: 'right' | 'left' | 'up' | 'down') {\n    const {orientation} = this.snake;\n    const horCondition = ['right', 'left'].indexOf(vector) === -1 && orientation === 'horizontal';\n    const vertCondition = ['up', 'down'].indexOf(vector) === -1 && orientation === 'vertical';\n    if (!this.keyboardLocked && (horCondition || vertCondition)) {\n      this.keyboardLocked = true;\n      this.snake.orientation = orientation === 'vertical' ? 'horizontal' : 'vertical';\n      this.snake.direction = vector;\n    }\n  }\n\n  gameAction() {\n    const moveSnake = () => {\n      const {rows, columns} = this.grid;\n      const {direction, positions} = this.snake;\n      const tailPos = positions.slice(0, -1);\n      const headPos = this.makeStep(positions[0], direction);\n      const coords = (() => {\n        // y reffers to rows, x reffers to columns\n        const y = Math.trunc(positions[0] / columns);\n        const x = positions[0] - y * columns;\n        return {x, y};\n      })();\n\n      const collisionTriggers = [\n        direction === 'right' && coords.x === columns - 1,\n        direction === 'left' && coords.x === 0,\n        direction === 'down' && coords.y === rows - 1,\n        direction === 'up' && coords.y === 0,\n        tailPos.indexOf(headPos) !== -1\n      ];\n      for (const collision of collisionTriggers) {\n        if (collision) { this.setError('Whoops'); }\n      }\n\n      let rewardEl: number;\n      if (headPos === this.feed.position) { rewardEl = this.rewardForFeed(); }\n      this.snake.positions = rewardEl === undefined ? [headPos, ...tailPos] : [headPos, ...tailPos, rewardEl];\n      this.keyboardLocked = false;\n      this.iterations++;\n      return this.iterations;\n    };\n    return moveSnake();\n  }\n\n  makeStep(position, direction) {\n    switch (direction) {\n      case 'right': return position + 1;\n      case 'left': return position - 1;\n      case 'up': return position - this.grid.columns;\n      case 'down': return position + this.grid.columns;\n    }\n  }\n\n  rewardForFeed() {\n    const {speed} = this.snake;\n    this.feed.position = this.randomPos();\n    this.feed.points += 20;\n    this.snake.points += this.feed.points;\n    this.snake.speed = speed > 120 ? speed - 70 : speed;\n    // return last snake element as a bonus\n    return this.snake.positions[this.snake.positions.length - 1];\n  }\n\n  setError(msg = '') {\n    if (msg) { console.error(msg); }\n    this.gameStates.isOver = true;\n    this.pauseSubject.next(true);\n    throw new Error('game over!');\n  }\n\n}\n","<section>\n  <div class=\"panel-info\">\n    <div class=\"score\">Your score: {{snake.points}}</div>\n    <div class=\"speed\">Snake's speed: {{1000 - snake.speed}}</div>\n  </div>\n  <div class=\"panel-controls\">\n    <button class=\"start\" *ngIf=\"gameStates.isPaused || gameStates.isOver\" (click)=\"initGame()\">\n      {{ gameStates.isOver ? 'New Game' : 'Shuffle' }}\n    </button>\n    <button class=\"toggle-play\" *ngIf=\"!gameStates.isOver\" (click)=\"togglePause()\">\n      {{ gameStates.isPaused ? 'Play' : 'Pause' }}\n    </button>\n  </div>\n</section>\n<div class=\"grid-container\" *ngIf=\"!gameStates.isOver; else gameOver\"\n  [style.--grid-color]=\"'#096792'\"\n  [style.--rows]=\"grid.rows\"\n  [style.--columns]=\"grid.columns\">\n  <div class=\"grid-cell\" *ngFor=\"let i of generateGridList()\"\n  [ngClass]=\"[i === feed.position ? 'feed' : '', snake.positions.indexOf(i) !== -1 ? 'snake-part' : '']\"></div>\n</div>\n<ng-template #gameOver>\n  <div class=\"big-caption\">Game Over!</div>\n</ng-template>\n<hr>\n<section>\n  <pre>Control by arrows, space - toggle pause/play, enter - reset game.\n    No records saving. Good luck.</pre>\n</section>\n<div>\n  <p>{{gameObserver.time | async}}</p>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}